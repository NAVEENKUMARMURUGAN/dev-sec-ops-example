name: Security Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Semgrep Job with Container
  semgrep:
    name: Semgrep Scan
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Run Semgrep
        if: (github.actor != 'dependabot[bot]')
        run: |
          semgrep ci \
            --json \
            --output semgrep-results.json \
            --include ./sast/vulnerable_examples \
            --config "p/security-audit" \
            --config "p/owasp-top-ten" \
            --config "p/cwe-top-25"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
          SEMGREP_TIMEOUT: 300
          SEMGREP_BASELINE_REF: ${{ github.event.pull_request.base.ref || github.event.repository.default_branch }}

      # Upload results for other jobs
      - name: Upload Semgrep Results
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-results
          path: semgrep-results.json

  # Main Security Analysis Job
  security-analysis:
    needs: semgrep
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Code Analysis - Bandit
      - name: Run Bandit
        continue-on-error: true
        run: |
          pip install bandit
          bandit -r ./sast/vulnerable_examples -ll -f json -o bandit-results.json

      # Download Semgrep Results
      - name: Download Semgrep Results
        uses: actions/download-artifact@v3
        with:
          name: semgrep-results
          path: .

      # Import Results to Snyk
      - name: Import Bandit Results to Snyk
        if: always()
        run: |
          RESPONSE=$(curl -X POST \
            "https://api.snyk.io/v1/org/${{ secrets.SNYK_ORG_ID }}/integrations/imports" \
            -H "Authorization: token ${{ secrets.SNYK_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            --data-binary @bandit-results.json \
            --fail \
            --silent \
            --show-error)

          if [ $? -eq 0 ]; then
            echo "Successfully imported Bandit results to Snyk"
            echo "Response: ${RESPONSE}"
          else
            echo "Failed to import Bandit results to Snyk"
            echo "Error: ${RESPONSE}"
            exit 1
          fi

      - name: Import Semgrep Results to Snyk
        if: always()
        run: |
          RESPONSE=$(curl -X POST \
            "https://api.snyk.io/v1/org/${{ secrets.SNYK_ORG_ID }}/integrations/imports" \
            -H "Authorization: token ${{ secrets.SNYK_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            --data-binary @semgrep-results.json \
            --fail \
            --silent \
            --show-error)

          if [ $? -eq 0 ]; then
            echo "Successfully imported Semgrep results to Snyk"
            echo "Response: ${RESPONSE}"
          else
            echo "Failed to import Semgrep results to Snyk"
            echo "Error: ${RESPONSE}"
            exit 1
          fi

      # Check Results and Fail Build if Needed
      - name: Check Security Issues
        if: always()
        run: |
          # Check Bandit results
          if [ -f bandit-results.json ]; then
            if jq -e '.results[] | select(.issue_severity == "HIGH")' bandit-results.json > /dev/null; then
              echo "::error::High severity issues found in Bandit scan"
              FAIL=true
            fi
          fi

          # Check Semgrep results
          if [ -f semgrep-results.json ]; then
            if jq -e '.results[] | select(.extra.severity == "ERROR")' semgrep-results.json > /dev/null; then
              echo "::error::Critical issues found in Semgrep scan"
              FAIL=true
            fi
          fi

          # Fail the build if high severity issues found
          if [ "$FAIL" = true ]; then
            echo "Security scan failed due to high severity issues"
            echo "Results have been uploaded to Snyk for review"
            exit 1
          fi

      # Notify on completion
      - name: Notification
        if: always()
        run: |
          echo "Security scan completed"
          echo "Results uploaded to Snyk at: https://app.snyk.io/org/${{ secrets.SNYK_ORG_ID }}/projects"
